RELATÓRIO SITUAÇÃO DE APRENDIZAGEM 2 - Projetos em JavaScript

Nessa atividade foram feitos 3 projetos ( Piano virtual, Cronômetro e Jogo da velha ) , com o objetivo de estudar e compreender mais sobre a linguagem JavaScript além de demonstrar suas funcionalidades. Portanto segue abaixo os detalhes sobre cada projeto feito:

1- PIANO JavaScript

O piano, dado inicialmente na dificuldade fácil, é um 'projeto simples" que estimula a lógica de programação e introduz conceitos básicos da linguagem JavaScript de uma forma interativa e que ainda lhe permite desbravar eventos, funções e manipulação de variáveis. Apesar de "simples" é um ótimo programa para se testar.


EXPLICANDO O CÓDIGO:

Inicialmente temos a criação de alguns botões e tags do tipo audio. Cada botão teve um id único designado para poder ser manipulado no js e que permitiu a interação. 
"<button id="btn1"></button>"
"<audio id="audio" src="sons/do8.wav"></audio>"
Baixei as 8 notas musicais numa plataforma de aúdios online no formato .wav e os aloquei na pastas sons.
Posteriormente comecei a manipular os id dentro do código js, observe:

"const btn = document.getElementById('btn');
btn.addEventListener('click', function () {
    const audio = document.getElementById('audio');
    audio.play();
})"

Primeiro criei uma constante chamada btn que serviu para eu alocar o id 'btn' presente no código html e em seguinte, adicionei um evento à constante com o ouvinte 'click' que executa uma ação postergada.
Repare que o evento 'click' desencadeia a reação que foi criada dentro da function(
    Uma constante para alocar o audio do html dentro do js, entao eu pego seu id e manipulo-o e após tê-lo no js, uso uma função simples que é a .play() que no caso, startou o aúdio após acontecer o click.
); 

OBS:Após alguns testes, consegui manipular de forma que o main.js ficasse curto e eficaz, iterei em um laço que corre os botoes de 0 a 30: desta forma:

for (let i = 0; i <= 30; i++) {
    const btn = document.getElementById(`btn${i}`);
    const audio = document.getElementById(`audio${i}`);
    btn.addEventListener('click', function () {
        audio.play();
    });
}


 OUTRO JEITO DE FAZER É POR MEIO DE FUNÇÕES - TESTEI ESSE INICIALMENTE COM ITERAÇÃO MAS NAO CONSEGUI O EXECUTAR CADA UM COM UM SOM - LEMBRE-SE DE COLOCAR A FUNCTION NA CLASSE DO BOTAO COM O ONCLICK(no html) 
 function som() {
     btn.addEventListener('click', function() {
         const audio = document.getElementById('audio')
        audio.play();
   } )
}


Criei também uma function que mostrava uma onda sonora embaixo da tecla quando clicado, essa funciona muito bem, o real problema é encontrar um bom video e ainda por cima sem o fundo
function mostrarOnda () {
    const vid = document.getElementById('vid');
    vid.style.display = "block";
    //função para fazer ondas sonoras aparecerem - ela funciona, mas nao consigo um video bom :)
}

2- Cronômetro - JavaScript

Em resumo , o projeto consiste em um Cronômetro simples em que podemos ver horas,minutos,segundo e milissegundos.
Para fazer esse cronômetro foi necessário utilizar HTML, CSS e , principalmente , JavaScript. Na página html é bem simples há um formulario com 3 botões ("Start","Pause","Reset") e os campos numéricos (Horas,Minutos,Segundos e Milissegundos) com a página Html feita , vamos ao JavaScript que basicamente é o maior responsavél pelo funcionamento do projeto.

No javaScript foram criadas 5 variaveis (let) : horas, minutos , segundos, milissegundos e "cron"; Junto das variaveis também adicionamos Ações aos botões presente no formulario ("Start","Pause","Reset") para que assim que clicados eles executem uma função.
No todo há 5 funções: "start()","pause()","reset()","cronometro()","returnData()". A função "start()" é executada assim que clicamos no botão Iniciar , nela utilizamos uma função já existente do javaScript , setInterval() , para colocarmos um intervalo de tempo (10 milissegundos) para que assim o cronômetro tenha um início e junto desse intervalo também executamos a função "cronometro()". Na função "pause()" ,que é executada pelo botão Pause, paramos o cronômetro tirando aquele intervalo q foi colocado na função "start()". Na função "reset()" , que é executada assim que clicamos no botão Resetar, redefinimos o cronômetro voltando todos os campos para valor 0. A função "cronometro()" é a que da vida ao nosso cronômetro , nela há o sistema de conversão de milissegundos para segundos de segundos para minutos e minutos para horas e assim diante.Por fim, temos a função "returnData()" que deixa o projeto mais dinâmico basicamente ela faz com que se um número for menor que 10 então concatena com um 0 a frente (ex: 01 , 09);

Conclui-se que com um projeto simples ,divertido e interativo é capaz de aprender e demonstrar algumas capacidades da linguagem JavaScript. Com esse projeto aprendi muito mais sobre JavaScript , por exemplo: Funções, e como ele pode ser versátil. Por meio de pesquisas na internet, fui descobrindo cada vez mais seu potencial.


3- Jogo Da Velha - JavaScript

O jogo da velha é um jogo clássico de tabuleiro que envolve dois jogadores, geralmente identificados como X e O, que se alternam para preencher um tabuleiro 3x3 com seus respectivos símbolos. O jogo continua até que um jogador vença ou ocorra um empate. Vamos analisar as principais funções do código fornecido:

HTML:
1. !DOCTYPE html: Esta declaração define o tipo de documento como HTML5, informando ao navegador como interpretar o código.
2. <meta name="viewport">: Esta meta tag controla a escala inicial da página para dispositivos móveis.
3. <link rel="stylesheet">: Inclui um arquivo CSS externo chamado "Style.css" para estilizar a página.
4. <script src="Velha.js"></script>: Inclui um arquivo JavaScript externo chamado "Velha.js" para adicionar interatividade ao jogo.
5. <div id="main">: Um elemento div com o ID "main" envolve todo o conteúdo visível da página.
6. <button id="but">: Um botão com o ID "but" é fornecido para reiniciar o jogo quando clicado.
7. <section id="semprex">: Uma seção com o ID "semprex" contém um parágrafo que informa que o jogador X sempre começa.

CSS:
1. <h1>:Estilo para o cabeçalho com uma fonte personalizada, cor e tamanho.
2. #b1, #b2, #b3, #b4, #b5, #b6, #b7, #b8, #b9{}: Estilo para os elementos de grade do tabuleiro, como bordas, cores de texto, fontes e tamanho.
3. #but:Estilo para o botão de reinício, incluindo tamanho, cores e fonte.
4. Estilo para o espaço que exibe de quem é a vez de jogar.

JS:
1. myfunc(): Esta função é chamada sempre que um jogador clica em um dos campos do tabuleiro. Ela verifica se um jogador ganhou, se houve empate ou se o jogo deve continuar.
2. myfunc_2(): Esta função é chamada quando o botão "REINICIAR" é clicado, reiniciando o jogo e habilitando todos os campos do tabuleiro.
3. myfunc_3() a myfunc_11(): Essas funções são chamadas quando um jogador clica em um campo específico do tabuleiro. Elas preenchem o campo com o símbolo do jogador da vez (X ou O) e desabilitam o campo para evitar que seja jogado novamente.
